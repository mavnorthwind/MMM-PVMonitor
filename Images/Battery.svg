<?xml version="1.0" encoding="UTF-8"?>

<svg xmlns="http://www.w3.org/2000/svg"
     id="battery"
     viewBox="0 0 60 32"
     version="1.1"
     role="img"
     aria-label="Battery symbol"
     data-fill="40"> 
    <defs>
        <!-- Shared gradients -->
        <!-- move to local html file! -->
        <!--
        <linearGradient id="charging" x1="0%" y1="0%" x2="100%" y2="0%" spreadMethod="repeat">
            <stop offset="20%" stop-color="#040"/>
            <stop offset="50%" stop-color="#080"/>
            <stop offset="80%" stop-color="#040"/>
            <animate attributeName="x1" dur="2000ms" from="-100%" to="100%" repeatCount="indefinite"/>
            <animate attributeName="x2" dur="2000ms" from="0%" to="200%" repeatCount="indefinite"/>
        </linearGradient>

        <linearGradient id="discharging" x1="0%" y1="0%" x2="100%" y2="0%" spreadMethod="repeat">
            <stop offset="20%" stop-color="#040"/>
            <stop offset="50%" stop-color="#080"/>
            <stop offset="80%" stop-color="#040"/>
            <animate attributeName="x1" dur="2000ms" from="100%" to="-100%" repeatCount="indefinite"/>
            <animate attributeName="x2" dur="2000ms" from="200%" to="0%" repeatCount="indefinite"/>
        </linearGradient>
        -->
    </defs>

    <!-- Shape of a battery -->
    <rect id="SoC" fill="purple" x="3" y="3" width="50" height="26"></rect>
    <polygon id="Contact" fill="#666666" points="55 24 55 8 60 12 60 20"></polygon>
    <path id="Outline" fill="#666666" d="M54,4 L54,28 C54,29.1 53.1,30 52,30 L4,30 C2.9,30 2,29.1 2,28 L2,4 C2,2.9 2.9,2 4,2 L52,2 C53.1,2 54,2.9 54,4 Z M4,0 C1.8,0 0,1.8 0,4 L0,28 C0,30.2 1.8,32 4,32 L52,32 C54.2,32 56,30.2 56,28 L56,4 C56,1.8 54.2,0 52,0 L4,0 Z"></path>


    <!-- embedded script to calculate the color and width of SoC by data-fill attribute-->
    <script type="application/ecmascript">
    <![CDATA[
        (function() {
            var svg = document.currentScript.ownerSVGElement;
            var fillRect = svg.getElementById('SoC');
            var totalWidth = parseFloat(fillRect.getAttribute('width') || 20);

            // Interpolate color between stops
            function getColor(percent) {
                // Stops: 0%-10% red, 20% yellow, 50%-100% green
                var stops = [
                    { pct: 0, color: [255,0,0] },
                    { pct: 10, color: [255,0,0] },
                    { pct: 20, color: [192,192,0] },
                    { pct: 50, color: [0,192,0] },
                    { pct: 100, color: [0,192,0] }
                ];
                var lower = stops[0], upper = stops[stops.length-1];
                for(var i=0; i < stops.length-1; i++) {
                    if(percent >= stops[i].pct && percent <= stops[i+1].pct) {
                        lower = stops[i];
                        upper = stops[i+1];
                        break;
                    }
                }
                var t = (percent - lower.pct)/(upper.pct - lower.pct);
                var r = Math.round(lower.color[0] + t*(upper.color[0]-lower.color[0]));
                var g = Math.round(lower.color[1] + t*(upper.color[1]-lower.color[1]));
                var b = Math.round(lower.color[2] + t*(upper.color[2]-lower.color[2]));

                return 'rgb('+r+','+g+','+b+')';
            }

            // Function to update fill dynamically
            svg.updateFill = function(percent) {
                percent = Math.max(0, Math.min(100, percent));
                var fillWidth = totalWidth * percent / 100;
                fillRect.setAttribute('width', fillWidth);
                fillRect.setAttribute('fill', getColor(percent));
                svg.setAttribute('data-fill', percent); // optional, update attribute
            };

            // Initialize
            svg.updateFill(parseFloat(svg.getAttribute('data-fill') || 0));
        })();
    ]]>
    </script>

</svg>